Index: ff_clean_coding/src/com/app/service/implementations/StockServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.service.implementations;\r\n\r\nimport com.app.model.*;\r\nimport com.app.model.dto.ListOfItemsResponse;\r\nimport com.app.model.dto.ListOfStocksResponse;\r\nimport com.app.service.interfaces.StockService;\r\nimport com.app.util.DBConnection;\r\nimport com.app.util.RiskyFunctionAnyType;\r\n\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.Statement;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static com.app.util.FunctionWithTryCatch.tryCatchAnyResponseExecute;\r\nimport static com.app.util.FunctionWithTryCatch.tryCatchTransactionalExecute;\r\n\r\npublic class StockServiceImpl implements StockService {\r\n    @Override\r\n    public ListOfStocksResponse getStocksbyCashering(String casheringNumber) {\r\n        String query = \"SELECT stocks.id, stocks.cashering_no, stocks.item_no ,items.item_name,\" +\r\n                \"stocks.quantity, stocks.items_sold FROM stocks \" +\r\n                \"INNER JOIN items ON stocks.item_no=items.item_no \" +\r\n                \"WHERE stocks.cashering_no='\" + casheringNumber + \"'\";\r\n        DBConnection con = new DBConnection();\r\n        ListOfStocksResponse resToConsole;\r\n\r\n        RiskyFunctionAnyType func = () -> {\r\n\r\n            List<Stocks> stocks = new ArrayList<>();\r\n            Statement statement;\r\n            ResultSet resultSet;\r\n            statement = con.getConnection().createStatement();\r\n            resultSet = statement.executeQuery(query);\r\n            while (resultSet.next()) {\r\n                int id = resultSet.getInt(1);\r\n                String cashering_no = resultSet.getString(2);\r\n                String item_no = resultSet.getString(3);\r\n                String item_name = resultSet.getString(4);\r\n                int quantity = resultSet.getInt(5);\r\n                int items_sold = resultSet.getInt(6);\r\n                Stocks itemStock = new Stocks(id,cashering_no,item_no,item_name,quantity, items_sold);\r\n//                String unit = resultSet.getString(6);\r\n//                String status = resultSet.getString(7);\r\n//                Item item = new Item(id, item_no, item_name, item_description, price, unit, status);\r\n                stocks.add(itemStock);\r\n            }\r\n            Response<Stocks> res = new Response<>(\"success\", \"Successfully fetch Items\",stocks);\r\n            return res;\r\n        };\r\n        Response<?> res = tryCatchAnyResponseExecute(con,func);\r\n        ListOfStocksResponse stocksRes = new ListOfStocksResponse();\r\n        List<Stocks> stockItems = new ArrayList<>();\r\n        stocksRes.setStatus(res.getStatus());\r\n        stocksRes.setMessage(res.getMessage());\r\n        if(res.getStatus().equals(\"success\")){\r\n\r\n            for (Object obj: res.getListOfItems()) {\r\n                Stocks item = (Stocks) obj;\r\n                stockItems.add(item);\r\n            }\r\n            stocksRes.setStocks(stockItems);\r\n        }\r\n\r\n        return stocksRes;\r\n    }\r\n\r\n    @Override\r\n    public Response<Stocks> addItemsToCashering(List<Stocks> stocks) {\r\n        String query = \"INSERT INTO stocks (cashering_no,item_no, quantity)\"\r\n                + \"VALUES(?,?,?)\";\r\n\r\n        DBConnection con = new DBConnection();\r\n\r\n        RiskyFunctionAnyType func = () -> {\r\n            Response<Stocks> res = new Response<>();\r\n\r\n            PreparedStatement stmt1 = con.getConnection().prepareStatement(query);\r\n            for ( Stocks ite: stocks) {\r\n                stmt1.setString(1,ite.getCasheringNumber());\r\n                stmt1.setString(2,ite.getItemNumber());\r\n                stmt1.setInt(3,ite.getQuantity());\r\n                stmt1.executeUpdate();\r\n            }\r\n\r\n            res.setStatus(\"success\");\r\n            res.setMessage(\"Successfully Saved Stocks to Cashering\");\r\n            return res;\r\n        };\r\n        return (Response<Stocks>) tryCatchTransactionalExecute(con, func);\r\n//        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ff_clean_coding/src/com/app/service/implementations/StockServiceImpl.java b/ff_clean_coding/src/com/app/service/implementations/StockServiceImpl.java
--- a/ff_clean_coding/src/com/app/service/implementations/StockServiceImpl.java	
+++ b/ff_clean_coding/src/com/app/service/implementations/StockServiceImpl.java	
@@ -1,7 +1,6 @@
 package com.app.service.implementations;
 
 import com.app.model.*;
-import com.app.model.dto.ListOfItemsResponse;
 import com.app.model.dto.ListOfStocksResponse;
 import com.app.service.interfaces.StockService;
 import com.app.util.DBConnection;
Index: ff_clean_coding/src/com/app/model/Stocks.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.model;\r\n\r\npublic class Stocks {\r\n\r\n    private int id;\r\n\r\n    private String casheringNumber;\r\n\r\n    private String itemNumber;\r\n\r\n    private String itemName;\r\n\r\n    private int quantity;\r\n\r\n    private int itemSold;\r\n\r\n    public Stocks(int id, String casheringNumber, String itemNumber, int quantity, int itemSold) {\r\n        this.id = id;\r\n        this.casheringNumber = casheringNumber;\r\n        this.itemNumber = itemNumber;\r\n        this.quantity = quantity;\r\n        this.itemSold = itemSold;\r\n    }\r\n\r\n    public Stocks(int id, String casheringNumber, String itemNumber, String itemName, int quantity, int itemSold) {\r\n        this.id = id;\r\n        this.casheringNumber = casheringNumber;\r\n        this.itemNumber = itemNumber;\r\n        this.itemName = itemName;\r\n        this.quantity = quantity;\r\n        this.itemSold = itemSold;\r\n    }\r\n\r\n    public Stocks(String casheringNumber, String itemNumber, int quantity) {\r\n        this.casheringNumber = casheringNumber;\r\n        this.itemNumber = itemNumber;\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getCasheringNumber() {\r\n        return casheringNumber;\r\n    }\r\n\r\n    public void setCasheringNumber(String scheduleNumber) {\r\n        this.casheringNumber = casheringNumber;\r\n    }\r\n\r\n    public String getItemNumber() {\r\n        return itemNumber;\r\n    }\r\n\r\n    public void setItemNumber(String itemNumber) {\r\n        this.itemNumber = itemNumber;\r\n    }\r\n\r\n    public String getItemName() {\r\n        return itemName;\r\n    }\r\n\r\n    public void setItemName(String itemName) {\r\n        this.itemName = itemName;\r\n    }\r\n\r\n    public int getQuantity() {\r\n        return quantity;\r\n    }\r\n\r\n    public void setQuantity(int quantity) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public int getItemSold() {\r\n        return itemSold;\r\n    }\r\n\r\n    public void setItemSold(int itemSold) {\r\n        this.itemSold = itemSold;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ff_clean_coding/src/com/app/model/Stocks.java b/ff_clean_coding/src/com/app/model/Stocks.java
--- a/ff_clean_coding/src/com/app/model/Stocks.java	
+++ b/ff_clean_coding/src/com/app/model/Stocks.java	
@@ -14,12 +14,11 @@
 
     private int itemSold;
 
-    public Stocks(int id, String casheringNumber, String itemNumber, int quantity, int itemSold) {
-        this.id = id;
+    public Stocks(String casheringNumber, String itemNumber, String itemName , int quantity) {
         this.casheringNumber = casheringNumber;
         this.itemNumber = itemNumber;
         this.quantity = quantity;
-        this.itemSold = itemSold;
+        this.itemName = itemName;
     }
 
     public Stocks(int id, String casheringNumber, String itemNumber, String itemName, int quantity, int itemSold) {
@@ -37,6 +36,7 @@
         this.quantity = quantity;
     }
 
+
     public int getId() {
         return id;
     }
Index: ff_clean_coding/src/com/app/console/CasheringConsole.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.console;\r\n\r\nimport com.app.controller.CasheringController;\r\nimport com.app.controller.ItemController;\r\nimport com.app.controller.StockController;\r\nimport com.app.model.Cashering;\r\nimport com.app.model.Item;\r\nimport com.app.model.Response;\r\nimport com.app.model.Stocks;\r\nimport com.app.model.dto.CasheringItemResponse;\r\nimport com.app.model.dto.ListOfItemsResponse;\r\nimport com.app.model.dto.ListOfStocksResponse;\r\nimport com.app.state.AppState;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class CasheringConsole {\r\n    private final static Scanner sc = new Scanner(System.in);\r\n\r\n    private static List<Item> activeItems = new ArrayList<>();\r\n\r\n    private static List<Stocks> casheringStocks = new ArrayList<>();\r\n\r\n    private static String currentCasheringNumber;\r\n\r\n    private static Cashering currentCashering;\r\n\r\n    public static void init(){\r\n        getCreatedCashering();\r\n    }\r\n\r\n    public static void getCasheringStocks(){\r\n        ListOfStocksResponse res = StockController.getStocksbyCashering(currentCasheringNumber);\r\n        System.out.println(res.getMessage());\r\n\r\n        if (res.getStatus().equals(\"success\")) {\r\n            casheringStocks = res.getStocks();\r\n            AppState.stocksList = casheringStocks;\r\n//            displayAllItem();\r\n            displayStocks();\r\n        } else {\r\n            displayErrorConsole();\r\n        }\r\n\r\n//        StockController.getStocksbyCashering(currentCasheringNumber);\r\n    }\r\n\r\n    public static void getCreatedCashering(){\r\n        CasheringItemResponse item = CasheringController.getCreatedCashering();\r\n        System.out.println(item.getStatus());\r\n\r\n        if(item.getStatus().equals(\"success\")){\r\n            //\r\n            if(item.getCashering().getOperationNumber() == null){\r\n                displayCasheringDashboard();\r\n            }\r\n            currentCasheringNumber = item.getCashering().getOperationNumber();\r\n            currentCashering = item.getCashering();\r\n            AppState.cashering = item.getCashering();\r\n\r\n            displayCreatedCashering();\r\n        } else {\r\n            //\r\n            displayCasheringDashboard();\r\n        }\r\n    }\r\n\r\n    public static void getActiveItems(){\r\n        ListOfItemsResponse res = ItemController.getActiveItems();\r\n        if (res.getStatus().equals(\"success\")) {\r\n            activeItems = res.getItems();\r\n            //displayAllItem();\r\n            displayActiveItems();\r\n\r\n        } else {\r\n            displayErrorConsole();\r\n        }\r\n    }\r\n\r\n    public static void addItemsToCashering(){\r\n        List<Stocks> stocksList = new ArrayList<>();\r\n//        CSH-1009\r\n        Stocks stocks1 = new Stocks(\"CSH-1009\",\"ITM-1021\",20);\r\n        Stocks stocks2 = new Stocks(\"CSH-1009\",\"ITM-1024\",10);\r\n        stocksList.add(stocks1);\r\n        stocksList.add(stocks2);\r\n        Response<Stocks> res = StockController.addItemsToCashering(stocksList);\r\n        System.out.println(res.getStatus());\r\n        System.out.println(res.getMessage());\r\n    }\r\n    public static void createCashering(){\r\n        Response<Cashering> res = CasheringController.createCashering();\r\n        if(res.getStatus().equals(\"success\")){\r\n            displayCasheringOptions();\r\n        } else {\r\n            displayErrorConsole();\r\n            displayCasheringDashboard();\r\n        }\r\n    }\r\n\r\n    public static void openCashering(){\r\n        Response<Cashering> res = CasheringController.openCashering(currentCasheringNumber);\r\n        if(res.getStatus().equals(\"success\")){\r\n            getCreatedCashering();\r\n        } else {\r\n            displayErrorConsole();\r\n            displayCasheringOptions();\r\n        }\r\n    }\r\n\r\n    public static void closeCashering(){\r\n        Response<Cashering> res = CasheringController.closeCashering(currentCasheringNumber);\r\n        if(res.getStatus().equals(\"success\")){\r\n            displayCasheringDashboard();\r\n        } else {\r\n            displayErrorConsole();\r\n            displayCasheringOptions();\r\n        }\r\n    }\r\n\r\n    public static void displayErrorConsole(){\r\n        System.out.println(\"Something went wrong\");\r\n    }\r\n\r\n    public static void displayCasheringDashboard(){\r\n        System.out.println(\"What do you want? \");\r\n        System.out.println(\"    [1] Create New Cashering\");\r\n        System.out.println(\"    [2] Back to dashboard\");\r\n        System.out.print(\"Enter your choice: \");\r\n        int choice = sc.nextInt();\r\n        sc.nextLine();\r\n\r\n        if(choice==1){\r\n            createCashering();\r\n        } else if (choice == 2) {\r\n            //back\r\n        } else {\r\n            System.out.println(\"Invalid\");\r\n            displayCasheringDashboard();\r\n        }\r\n\r\n    }\r\n\r\n    public static void displayCreatedCashering(){\r\n        System.out.println(\"What do you want? \");\r\n        System.out.println(\"    [1] \" + currentCasheringNumber);\r\n        System.out.println(\"    [2] Back to dashboard\");\r\n        System.out.print(\"Enter your choice: \");\r\n        int choice = sc.nextInt();\r\n        sc.nextLine();\r\n\r\n        if(choice==1){\r\n            displayCasheringOptions();\r\n        } else if (choice == 2) {\r\n            //back\r\n            System.out.println(\"Back to Dashboard\");\r\n        } else {\r\n            System.out.println(\"Invalid\");\r\n            displayCreatedCashering();\r\n        }\r\n\r\n    }\r\n\r\n    public static void displayCasheringOptions(){\r\n        System.out.println(\"  \" + currentCasheringNumber + \"  \");\r\n        if(currentCashering.getOpenAt() == null){\r\n             System.out.print(\"Created but not yet Open\");\r\n        } else {\r\n            System.out.print(\"Created and Open\");\r\n        }\r\n\r\n        System.out.println(\"\\n\");\r\n        System.out.println(\"    [1] View Stocks\");\r\n\r\n        if(currentCashering.getOpenAt() == null) {\r\n            System.out.println(\"    [2] Open Cashering\");\r\n        } else {\r\n            System.out.println(\"    [2] Close Cashering\");\r\n        }\r\n        System.out.println(\"    [3] Back\");\r\n\r\n        System.out.print(\"Enter your choice: \");\r\n        int choice = sc.nextInt();\r\n        sc.nextLine();\r\n\r\n        switch (choice){\r\n            case 1:\r\n                System.out.println(\"Go to View Stocks\");\r\n                getCasheringStocks();\r\n                break;\r\n            case 2:\r\n                displayConfirmatoryAction();\r\n                break;\r\n            case 3:\r\n                displayCreatedCashering();\r\n                break;\r\n            default:\r\n                System.out.println(\"Invalid\");\r\n                displayCasheringDashboard();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public static void displayConfirmatoryAction(){\r\n        System.out.println(\"Do you to \");\r\n        if(currentCashering.getOpenAt() == null){\r\n            System.out.print(\"Open Cashering\");\r\n        }\r\n        else {\r\n            System.out.print(\"Close Cashering\");\r\n        }\r\n\r\n        System.out.println(\"    [1] Yes\");\r\n        System.out.println(\"    [2] No\");\r\n\r\n        System.out.print(\"Enter your choice: \");\r\n        int choice = sc.nextInt();\r\n        sc.nextLine();\r\n\r\n        switch (choice){\r\n            case 1:\r\n                if(currentCashering.getOpenAt() == null){\r\n                    openCashering();\r\n                }\r\n                else {\r\n                    closeCashering();\r\n                }\r\n                break;\r\n            case 2:\r\n                displayCasheringOptions();\r\n                break;\r\n            default:\r\n                System.out.println(\"Invalid Input\");\r\n                displayCasheringOptions();\r\n        }\r\n    }\r\n\r\n    public static void displayStocks(){\r\n        System.out.printf(\"\\n%-5s %-15s %-30s %-10s %-10s\\n\", \"Id\", \"Item Number\", \"Item Name\",\"Quantity\", \"Items Sold\");\r\n        for ( Stocks row: casheringStocks ) {\r\n            System.out.printf(\"\\n%-5s %-15s %-30s %-10s %-10s\\n\", row.getId(), row.getItemNumber(), row.getItemName(), row.getQuantity(), row.getItemSold());\r\n        }\r\n\r\n    }\r\n\r\n    public static void displayActiveItems() {\r\n        int selectedNumber;\r\n\r\n        for ( Item itm: activeItems ) {\r\n            System.out.println(\" [\" + (activeItems.indexOf(itm) + 1) + \"] \" + itm.getItem_no() + \" \" + itm.getItem_name());\r\n        }\r\n//        System.out.println( \" [\" + (items.size() + 1) + \"] \" + \"Create New Item\");\r\n//        System.out.println(\" [\" + (items.size() + 2) + \"] \" + \"Exit\");\r\n        System.out.print(\"Select an option: \");\r\n        selectedNumber = sc.nextInt();\r\n        sc.nextLine();\r\n\r\n//        if(selectedNumber <= 0 || selectedNumber > items.size() + 2){\r\n//            System.out.println(\"Invalid Input\");\r\n//            return;\r\n//        }\r\n//\r\n//        if(selectedNumber < items.size() + 1){\r\n//            selectedItem = items.get(selectedNumber-1);\r\n//            displayAnItemOptions();\r\n//            return;\r\n//        }\r\n//\r\n//        if(selectedNumber == items.size() + 1){\r\n//            displayCreateForm();\r\n//            return;\r\n//        }\r\n//\r\n//        if(selectedNumber == items.size() + 2 ){\r\n//            System.out.println(\"Exit\");\r\n//            return;\r\n//        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ff_clean_coding/src/com/app/console/CasheringConsole.java b/ff_clean_coding/src/com/app/console/CasheringConsole.java
--- a/ff_clean_coding/src/com/app/console/CasheringConsole.java	
+++ b/ff_clean_coding/src/com/app/console/CasheringConsole.java	
@@ -27,6 +27,8 @@
 
     private static Cashering currentCashering;
 
+    private static List<Stocks> temporaryList = new ArrayList<>();
+
     public static void init(){
         getCreatedCashering();
     }
@@ -38,13 +40,11 @@
         if (res.getStatus().equals("success")) {
             casheringStocks = res.getStocks();
             AppState.stocksList = casheringStocks;
-//            displayAllItem();
             displayStocks();
         } else {
             displayErrorConsole();
         }
 
-//        StockController.getStocksbyCashering(currentCasheringNumber);
     }
 
     public static void getCreatedCashering(){
@@ -79,16 +79,30 @@
         }
     }
 
+    public static void addItemToTemporaryList(Stocks stocks){
+        temporaryList.add(stocks);
+    }
+
+    public static void updateItem(Stocks stocks, Stocks newStocks){
+        int index = temporaryList.indexOf(stocks);
+        temporaryList.set(index,newStocks);
+    }
+
+    public static void deleteItem(Stocks stocks){
+        int index = temporaryList.indexOf(stocks);
+        temporaryList.remove(stocks);
+    }
+
     public static void addItemsToCashering(){
-        List<Stocks> stocksList = new ArrayList<>();
-//        CSH-1009
-        Stocks stocks1 = new Stocks("CSH-1009","ITM-1021",20);
-        Stocks stocks2 = new Stocks("CSH-1009","ITM-1024",10);
-        stocksList.add(stocks1);
-        stocksList.add(stocks2);
-        Response<Stocks> res = StockController.addItemsToCashering(stocksList);
+        Response<Stocks> res = StockController.addItemsToCashering(temporaryList);
         System.out.println(res.getStatus());
         System.out.println(res.getMessage());
+        if(res.getStatus().equals("success")){
+            displayCasheringDashboard();
+        } else {
+            displayErrorConsole();
+        }
+
     }
     public static void createCashering(){
         Response<Cashering> res = CasheringController.createCashering();
@@ -240,11 +254,67 @@
 
     public static void displayStocks(){
         System.out.printf("\n%-5s %-15s %-30s %-10s %-10s\n", "Id", "Item Number", "Item Name","Quantity", "Items Sold");
-        for ( Stocks row: casheringStocks ) {
-            System.out.printf("\n%-5s %-15s %-30s %-10s %-10s\n", row.getId(), row.getItemNumber(), row.getItemName(), row.getQuantity(), row.getItemSold());
+        if(casheringStocks.size() > 0){
+            for ( Stocks row: casheringStocks ) {
+                System.out.printf("\n%-5s %-15s %-30s %-10s %-10s\n", row.getId(), row.getItemNumber(), row.getItemName(), row.getQuantity(), row.getItemSold());
+            }
+            displayStockListOptions();
+        } else {
+            System.out.println("");
+//            displayEmptyStockList();
+            //bulky add
         }
+    }
+
+    public static void displayTemporaryListItem(){
+        System.out.printf("\n%-5s %-15s %-30s %-10s\n", "", "Item Number", "Item Name","Quantity");
+        for ( Stocks row: temporaryList ) {
+            System.out.printf("\n%-5s %-15s %-30s %-10s\n", "", row.getItemNumber(), row.getItemName(), row.getQuantity());
+        }
+        System.out.println(" ");
+
+        System.out.println("    [1] Add Item Stocks");
+        System.out.println("    [2] Update Item Quantity");
+        System.out.println("    [3] Remove Item");
+        System.out.println("    [4] Save this to Cashering Stocks");
+        System.out.println("    [5] Back");
+
+        System.out.print("Enter your choice: ");
+        int choice = sc.nextInt();
+        sc.nextLine();
+
+
+        switch (choice){
+            case 1 :
+                getActiveItems();
+            break;
+            case  2:
+                displayChangeQuantity();
+                //System.out.println("Update Item Quantity");
+                break;
+            case 3:
+                displayRemoveItem();
+                break;
+            case 4:
+                addItemsToCashering();
+            default:
+                displayCasheringDashboard();
+//                System.out.println("Back Options");
 
+        }
     }
+
+    public static void displayStockListOptions(){
+
+        System.out.println(" ");
+//        System.out.println("    [1] Add Item Stocks");
+//        System.out.println("    [2] Update Item Quantity");
+//        System.out.println("    [3] Remove Item");
+        System.out.println("    Press Enter to Return");
+        sc.nextLine();
+
+    }
+
 
     public static void displayActiveItems() {
         int selectedNumber;
@@ -252,31 +322,74 @@
         for ( Item itm: activeItems ) {
             System.out.println(" [" + (activeItems.indexOf(itm) + 1) + "] " + itm.getItem_no() + " " + itm.getItem_name());
         }
-//        System.out.println( " [" + (items.size() + 1) + "] " + "Create New Item");
-//        System.out.println(" [" + (items.size() + 2) + "] " + "Exit");
+
         System.out.print("Select an option: ");
         selectedNumber = sc.nextInt();
         sc.nextLine();
 
-//        if(selectedNumber <= 0 || selectedNumber > items.size() + 2){
-//            System.out.println("Invalid Input");
-//            return;
-//        }
-//
-//        if(selectedNumber < items.size() + 1){
-//            selectedItem = items.get(selectedNumber-1);
-//            displayAnItemOptions();
-//            return;
-//        }
-//
-//        if(selectedNumber == items.size() + 1){
-//            displayCreateForm();
-//            return;
-//        }
-//
-//        if(selectedNumber == items.size() + 2 ){
-//            System.out.println("Exit");
-//            return;
-//        }
+        //2. Get the Item from list
+        Item selectedItem = activeItems.get(selectedNumber-1);
+
+        System.out.print("Enter Quantity: ");
+        int quantity = sc.nextInt();
+        sc.nextLine();
+
+        //3. Create Stock Object
+        Stocks stockItem = new Stocks(currentCasheringNumber,selectedItem.getItem_no(),selectedItem.getItem_name(),quantity);
+
+        //4 Add to temporary List
+        addItemToTemporaryList(stockItem);
+        displayTemporaryListItem();
+    }
+
+    public static void displayChangeQuantity(){
+        System.out.printf("\n%-5s %-15s %-30s %-10s\n", "Index", "Item Number", "Item Name","Quantity");
+        for ( Stocks row: temporaryList ) {
+            System.out.printf("\n%-5s %-15s %-30s %-10s\n", temporaryList.indexOf(row)+1, row.getItemNumber(), row.getItemName(), row.getQuantity());
+        }
+        System.out.printf("\n%-5s %-15s\n",temporaryList.size()+1,"Back");
+        System.out.println(" ");
+
+        System.out.print("Enter your choice: ");
+        int choice = sc.nextInt();
+        sc.nextLine();
+
+        if(choice == temporaryList.size()+1){
+            displayTemporaryListItem();
+            return;
+        }
+
+        if(choice <= temporaryList.size()){
+            System.out.print("Enter new Quantity: ");
+            int quantity = sc.nextInt();
+            Stocks selectedStocks = temporaryList.get(choice-1);
+            selectedStocks.setQuantity(quantity);
+            updateItem(temporaryList.get(choice-1),selectedStocks);
+            sc.nextLine();
+        }
+        displayTemporaryListItem();
+    }
+
+    public static void displayRemoveItem(){
+        System.out.printf("\n%-5s %-15s %-30s %-10s\n", "Index", "Item Number", "Item Name","Quantity");
+        for ( Stocks row: temporaryList ) {
+            System.out.printf("\n%-5s %-15s %-30s %-10s\n", temporaryList.indexOf(row)+1, row.getItemNumber(), row.getItemName(), row.getQuantity());
+        }
+        System.out.printf("\n%-5s %-15s\n",temporaryList.size()+1,"Back");
+        System.out.println(" ");
+
+        System.out.print("Enter your choice: ");
+        int choice = sc.nextInt();
+        sc.nextLine();
+
+        if(choice == temporaryList.size()+1){
+            displayTemporaryListItem();
+            return;
+        }
+
+        if(choice <= temporaryList.size()){
+            deleteItem(temporaryList.get(choice-1));
+        }
+        displayTemporaryListItem();
     }
 }
